// Autogenerated from Pigeon (v22.4.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#include "debug_service.g.h"

G_DECLARE_FINAL_TYPE(GobjdebugMessageCodec, gobjdebug_message_codec, GOBJDEBUG, MESSAGE_CODEC, FlStandardMessageCodec)

struct _GobjdebugMessageCodec {
  FlStandardMessageCodec parent_instance;

};

G_DEFINE_TYPE(GobjdebugMessageCodec, gobjdebug_message_codec, fl_standard_message_codec_get_type())

static gboolean gobjdebug_message_codec_write_value(FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value, GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(gobjdebug_message_codec_parent_class)->write_value(codec, buffer, value, error);
}

static FlValue* gobjdebug_message_codec_read_value_of_type(FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type, GError** error) {
  switch (type) {
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(gobjdebug_message_codec_parent_class)->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void gobjdebug_message_codec_init(GobjdebugMessageCodec* self) {
}

static void gobjdebug_message_codec_class_init(GobjdebugMessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value = gobjdebug_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type = gobjdebug_message_codec_read_value_of_type;
}

static GobjdebugMessageCodec* gobjdebug_message_codec_new() {
  GobjdebugMessageCodec* self = GOBJDEBUG_MESSAGE_CODEC(g_object_new(gobjdebug_message_codec_get_type(), nullptr));
  return self;
}

struct _GobjdebugDebugServiceHostApiResponseHandle {
  GObject parent_instance;

  FlBasicMessageChannel* channel;
  FlBasicMessageChannelResponseHandle* response_handle;
};

G_DEFINE_TYPE(GobjdebugDebugServiceHostApiResponseHandle, gobjdebug_debug_service_host_api_response_handle, G_TYPE_OBJECT)

static void gobjdebug_debug_service_host_api_response_handle_dispose(GObject* object) {
  GobjdebugDebugServiceHostApiResponseHandle* self = GOBJDEBUG_DEBUG_SERVICE_HOST_API_RESPONSE_HANDLE(object);
  g_clear_object(&self->channel);
  g_clear_object(&self->response_handle);
  G_OBJECT_CLASS(gobjdebug_debug_service_host_api_response_handle_parent_class)->dispose(object);
}

static void gobjdebug_debug_service_host_api_response_handle_init(GobjdebugDebugServiceHostApiResponseHandle* self) {
}

static void gobjdebug_debug_service_host_api_response_handle_class_init(GobjdebugDebugServiceHostApiResponseHandleClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = gobjdebug_debug_service_host_api_response_handle_dispose;
}

static GobjdebugDebugServiceHostApiResponseHandle* gobjdebug_debug_service_host_api_response_handle_new(FlBasicMessageChannel* channel, FlBasicMessageChannelResponseHandle* response_handle) {
  GobjdebugDebugServiceHostApiResponseHandle* self = GOBJDEBUG_DEBUG_SERVICE_HOST_API_RESPONSE_HANDLE(g_object_new(gobjdebug_debug_service_host_api_response_handle_get_type(), nullptr));
  self->channel = FL_BASIC_MESSAGE_CHANNEL(g_object_ref(channel));
  self->response_handle = FL_BASIC_MESSAGE_CHANNEL_RESPONSE_HANDLE(g_object_ref(response_handle));
  return self;
}

G_DECLARE_FINAL_TYPE(GobjdebugDebugServiceHostApiGetHostnameResponse, gobjdebug_debug_service_host_api_get_hostname_response, GOBJDEBUG, DEBUG_SERVICE_HOST_API_GET_HOSTNAME_RESPONSE, GObject)

struct _GobjdebugDebugServiceHostApiGetHostnameResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(GobjdebugDebugServiceHostApiGetHostnameResponse, gobjdebug_debug_service_host_api_get_hostname_response, G_TYPE_OBJECT)

static void gobjdebug_debug_service_host_api_get_hostname_response_dispose(GObject* object) {
  GobjdebugDebugServiceHostApiGetHostnameResponse* self = GOBJDEBUG_DEBUG_SERVICE_HOST_API_GET_HOSTNAME_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(gobjdebug_debug_service_host_api_get_hostname_response_parent_class)->dispose(object);
}

static void gobjdebug_debug_service_host_api_get_hostname_response_init(GobjdebugDebugServiceHostApiGetHostnameResponse* self) {
}

static void gobjdebug_debug_service_host_api_get_hostname_response_class_init(GobjdebugDebugServiceHostApiGetHostnameResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = gobjdebug_debug_service_host_api_get_hostname_response_dispose;
}

static GobjdebugDebugServiceHostApiGetHostnameResponse* gobjdebug_debug_service_host_api_get_hostname_response_new(const gchar* return_value) {
  GobjdebugDebugServiceHostApiGetHostnameResponse* self = GOBJDEBUG_DEBUG_SERVICE_HOST_API_GET_HOSTNAME_RESPONSE(g_object_new(gobjdebug_debug_service_host_api_get_hostname_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static GobjdebugDebugServiceHostApiGetHostnameResponse* gobjdebug_debug_service_host_api_get_hostname_response_new_error(const gchar* code, const gchar* message, FlValue* details) {
  GobjdebugDebugServiceHostApiGetHostnameResponse* self = GOBJDEBUG_DEBUG_SERVICE_HOST_API_GET_HOSTNAME_RESPONSE(g_object_new(gobjdebug_debug_service_host_api_get_hostname_response_get_type(), nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value, fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details) : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(GobjdebugDebugServiceHostApi, gobjdebug_debug_service_host_api, GOBJDEBUG, DEBUG_SERVICE_HOST_API, GObject)

struct _GobjdebugDebugServiceHostApi {
  GObject parent_instance;

  const GobjdebugDebugServiceHostApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(GobjdebugDebugServiceHostApi, gobjdebug_debug_service_host_api, G_TYPE_OBJECT)

static void gobjdebug_debug_service_host_api_dispose(GObject* object) {
  GobjdebugDebugServiceHostApi* self = GOBJDEBUG_DEBUG_SERVICE_HOST_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(gobjdebug_debug_service_host_api_parent_class)->dispose(object);
}

static void gobjdebug_debug_service_host_api_init(GobjdebugDebugServiceHostApi* self) {
}

static void gobjdebug_debug_service_host_api_class_init(GobjdebugDebugServiceHostApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = gobjdebug_debug_service_host_api_dispose;
}

static GobjdebugDebugServiceHostApi* gobjdebug_debug_service_host_api_new(const GobjdebugDebugServiceHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  GobjdebugDebugServiceHostApi* self = GOBJDEBUG_DEBUG_SERVICE_HOST_API(g_object_new(gobjdebug_debug_service_host_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void gobjdebug_debug_service_host_api_get_hostname_cb(FlBasicMessageChannel* channel, FlValue* message_, FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  GobjdebugDebugServiceHostApi* self = GOBJDEBUG_DEBUG_SERVICE_HOST_API(user_data);

  if (self->vtable == nullptr || self->vtable->get_hostname == nullptr) {
    return;
  }

  g_autoptr(GobjdebugDebugServiceHostApiResponseHandle) handle = gobjdebug_debug_service_host_api_response_handle_new(channel, response_handle);
  self->vtable->get_hostname(handle, self->user_data);
}

void gobjdebug_debug_service_host_api_set_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix, const GobjdebugDebugServiceHostApiVTable* vtable, gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(GobjdebugDebugServiceHostApi) api_data = gobjdebug_debug_service_host_api_new(vtable, user_data, user_data_free_func);

  g_autoptr(GobjdebugMessageCodec) codec = gobjdebug_message_codec_new();
  g_autofree gchar* get_hostname_channel_name = g_strdup_printf("dev.flutter.pigeon.gobjdebug.DebugServiceHostApi.getHostname%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_hostname_channel = fl_basic_message_channel_new(messenger, get_hostname_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_hostname_channel, gobjdebug_debug_service_host_api_get_hostname_cb, g_object_ref(api_data), g_object_unref);
}

void gobjdebug_debug_service_host_api_clear_method_handlers(FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(GobjdebugMessageCodec) codec = gobjdebug_message_codec_new();
  g_autofree gchar* get_hostname_channel_name = g_strdup_printf("dev.flutter.pigeon.gobjdebug.DebugServiceHostApi.getHostname%s", dot_suffix);
  g_autoptr(FlBasicMessageChannel) get_hostname_channel = fl_basic_message_channel_new(messenger, get_hostname_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(get_hostname_channel, nullptr, nullptr, nullptr);
}

void gobjdebug_debug_service_host_api_respond_get_hostname(GobjdebugDebugServiceHostApiResponseHandle* response_handle, const gchar* return_value) {
  g_autoptr(GobjdebugDebugServiceHostApiGetHostnameResponse) response = gobjdebug_debug_service_host_api_get_hostname_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "DebugServiceHostApi", "getHostname", error->message);
  }
}

void gobjdebug_debug_service_host_api_respond_error_get_hostname(GobjdebugDebugServiceHostApiResponseHandle* response_handle, const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(GobjdebugDebugServiceHostApiGetHostnameResponse) response = gobjdebug_debug_service_host_api_get_hostname_response_new_error(code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel, response_handle->response_handle, response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "DebugServiceHostApi", "getHostname", error->message);
  }
}

struct _GobjdebugDebugServiceFlutterApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  gchar *suffix;
};

G_DEFINE_TYPE(GobjdebugDebugServiceFlutterApi, gobjdebug_debug_service_flutter_api, G_TYPE_OBJECT)

static void gobjdebug_debug_service_flutter_api_dispose(GObject* object) {
  GobjdebugDebugServiceFlutterApi* self = GOBJDEBUG_DEBUG_SERVICE_FLUTTER_API(object);
  g_clear_object(&self->messenger);
  g_clear_pointer(&self->suffix, g_free);
  G_OBJECT_CLASS(gobjdebug_debug_service_flutter_api_parent_class)->dispose(object);
}

static void gobjdebug_debug_service_flutter_api_init(GobjdebugDebugServiceFlutterApi* self) {
}

static void gobjdebug_debug_service_flutter_api_class_init(GobjdebugDebugServiceFlutterApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = gobjdebug_debug_service_flutter_api_dispose;
}

GobjdebugDebugServiceFlutterApi* gobjdebug_debug_service_flutter_api_new(FlBinaryMessenger* messenger, const gchar* suffix) {
  GobjdebugDebugServiceFlutterApi* self = GOBJDEBUG_DEBUG_SERVICE_FLUTTER_API(g_object_new(gobjdebug_debug_service_flutter_api_get_type(), nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->suffix = suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  return self;
}

struct _GobjdebugDebugServiceFlutterApiGetHostnameResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(GobjdebugDebugServiceFlutterApiGetHostnameResponse, gobjdebug_debug_service_flutter_api_get_hostname_response, G_TYPE_OBJECT)

static void gobjdebug_debug_service_flutter_api_get_hostname_response_dispose(GObject* object) {
  GobjdebugDebugServiceFlutterApiGetHostnameResponse* self = GOBJDEBUG_DEBUG_SERVICE_FLUTTER_API_GET_HOSTNAME_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(gobjdebug_debug_service_flutter_api_get_hostname_response_parent_class)->dispose(object);
}

static void gobjdebug_debug_service_flutter_api_get_hostname_response_init(GobjdebugDebugServiceFlutterApiGetHostnameResponse* self) {
}

static void gobjdebug_debug_service_flutter_api_get_hostname_response_class_init(GobjdebugDebugServiceFlutterApiGetHostnameResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = gobjdebug_debug_service_flutter_api_get_hostname_response_dispose;
}

static GobjdebugDebugServiceFlutterApiGetHostnameResponse* gobjdebug_debug_service_flutter_api_get_hostname_response_new(FlValue* response) {
  GobjdebugDebugServiceFlutterApiGetHostnameResponse* self = GOBJDEBUG_DEBUG_SERVICE_FLUTTER_API_GET_HOSTNAME_RESPONSE(g_object_new(gobjdebug_debug_service_flutter_api_get_hostname_response_get_type(), nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean gobjdebug_debug_service_flutter_api_get_hostname_response_is_error(GobjdebugDebugServiceFlutterApiGetHostnameResponse* self) {
  g_return_val_if_fail(GOBJDEBUG_IS_DEBUG_SERVICE_FLUTTER_API_GET_HOSTNAME_RESPONSE(self), FALSE);
  return self->error != nullptr;
}

const gchar* gobjdebug_debug_service_flutter_api_get_hostname_response_get_error_code(GobjdebugDebugServiceFlutterApiGetHostnameResponse* self) {
  g_return_val_if_fail(GOBJDEBUG_IS_DEBUG_SERVICE_FLUTTER_API_GET_HOSTNAME_RESPONSE(self), nullptr);
  g_assert(gobjdebug_debug_service_flutter_api_get_hostname_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar* gobjdebug_debug_service_flutter_api_get_hostname_response_get_error_message(GobjdebugDebugServiceFlutterApiGetHostnameResponse* self) {
  g_return_val_if_fail(GOBJDEBUG_IS_DEBUG_SERVICE_FLUTTER_API_GET_HOSTNAME_RESPONSE(self), nullptr);
  g_assert(gobjdebug_debug_service_flutter_api_get_hostname_response_is_error(self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue* gobjdebug_debug_service_flutter_api_get_hostname_response_get_error_details(GobjdebugDebugServiceFlutterApiGetHostnameResponse* self) {
  g_return_val_if_fail(GOBJDEBUG_IS_DEBUG_SERVICE_FLUTTER_API_GET_HOSTNAME_RESPONSE(self), nullptr);
  g_assert(gobjdebug_debug_service_flutter_api_get_hostname_response_is_error(self));
  return fl_value_get_list_value(self->error, 2);
}

static void gobjdebug_debug_service_flutter_api_get_hostname_cb(GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void gobjdebug_debug_service_flutter_api_get_hostname(GobjdebugDebugServiceFlutterApi* self, const gchar* response, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(response));
  g_autofree gchar* channel_name = g_strdup_printf("dev.flutter.pigeon.gobjdebug.DebugServiceFlutterApi.getHostname%s", self->suffix);
  g_autoptr(GobjdebugMessageCodec) codec = gobjdebug_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(channel, args, cancellable, gobjdebug_debug_service_flutter_api_get_hostname_cb, task);
}

GobjdebugDebugServiceFlutterApiGetHostnameResponse* gobjdebug_debug_service_flutter_api_get_hostname_finish(GobjdebugDebugServiceFlutterApi* self, GAsyncResult* result, GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel = FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response = fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) { 
    return nullptr;
  }
  return gobjdebug_debug_service_flutter_api_get_hostname_response_new(response);
}
